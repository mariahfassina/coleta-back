// server.js - Ponto de entrada principal do Backend (Vers√£o Final para Deploy)

// ---- 1. Importa√ß√µes Essenciais ----
import path from 'path'; // M√≥dulo nativo do Node.js para trabalhar com caminhos de arquivos
import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors'; // Importa a biblioteca CORS
import connectDB from './config/db.js';

// ---- 2. Importa√ß√£o das Rotas ----
import authRoutes from './routes/authRoutes.js';
import paginaRoutes from './routes/paginaRoutes.js';
import uploadRoutes from './routes/uploadRoutes.js';


// ---- 3. Configura√ß√£o Inicial ----
// Carrega as vari√°veis de ambiente do arquivo .env
dotenv.config();

// Executa a fun√ß√£o para conectar ao Banco de Dados
connectDB();

// Cria a inst√¢ncia principal da aplica√ß√£o Express
const app = express();


// ---- 1. Configura√ß√£o do CORS (com Whitelist) ----
// Lista de dom√≠nios que t√™m permiss√£o para acessar esta API.
const whitelist = [
  'http://localhost:3000',        // Para o desenvolvimento local do React
  'https://coletareact.vercel.app/'  // URL de produ√ß√£o do seu site no Vercel
];

const corsOptions = {
  origin: function (origin, callback) {
    // A condi√ß√£o `!origin` permite requisi√ß√µes sem origem (como do Postman ou de apps mobile).
    // A condi√ß√£o `whitelist.indexOf(origin) !== -1` verifica se a origem da requisi√ß√£o est√° na nossa lista de permiss√µes.
    if (!origin || whitelist.indexOf(origin) !== -1) {
      // Se a origem for permitida, a resposta √© enviada com sucesso.
      callback(null, true);
    } else {
      // Se a origem n√£o for permitida, a requisi√ß√£o √© rejeitada com um erro de CORS.
      callback(new Error('N√£o permitido pela pol√≠tica de CORS'));
    }
  },
};

// Aplica as op√ß√µes de CORS √† nossa aplica√ß√£o. Esta deve ser uma das primeiras coisas.
app.use(cors(corsOptions));

// Permite que o servidor aceite e interprete dados no formato JSON
app.use(express.json());


// ---- 5. Defini√ß√£o das Rotas da API (vem ANTES dos arquivos est√°ticos) ----
// Rota de teste para verificar se a API est√° online
app.get('/api', (req, res) => {
  res.send('API do Coleta Seletiva est√° rodando...');
});

// Delega as rotas para os arquivos especializados
app.use('/api/auth', authRoutes);
app.use('/api/paginas', paginaRoutes);
app.use('/api/upload', uploadRoutes);


// ---- 6. Configura√ß√£o para Servir Imagens Est√°ticas ----
const __dirname = path.resolve();
app.use('/uploads', express.static(path.join(__dirname, '/uploads')));


// ---- 7. Middlewares de Tratamento de Erros (vem POR √öLTIMO) ----
// Middleware para tratar erros de rotas n√£o encontradas (404)
app.use((req, res, next) => {
  const error = new Error(`Rota n√£o encontrada - ${req.originalUrl}`);
  res.status(404);
  next(error);
});

// Middleware para tratar todos os outros erros da aplica√ß√£o
app.use((err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  res.status(statusCode);
  res.json({
    message: err.message,
    // Em modo de produ√ß√£o, n√£o mostramos a pilha de erros por seguran√ßa
    stack: process.env.NODE_ENV === 'production' ? 'ü•û' : err.stack,
  });
});


// ---- 8. Inicia o Servidor ----
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT} em modo ${process.env.NODE_ENV || 'development'}`);
  // Mensagem de verifica√ß√£o para o deploy
  console.log('--- VERS√ÉO COM CORS SIMPLIFICADO PRONTA PARA DEPLOY ---'); 
});